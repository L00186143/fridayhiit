Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type
  
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: 'friday-hiit'


Resources:

  HIITVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
    
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: HIITVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref HIITVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HIITVPC
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: "eu-north-1a"
      MapPublicIpOnLaunch: true     
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HIITVPC
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: "eu-north-1a"
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A


  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HIITVPC
      CidrBlock: 10.1.3.0/24
      AvailabilityZone: "eu-north-1b"
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HIITVPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HIITVPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway  

  NATGateway:
   Type: AWS::EC2::NatGateway
   Properties:
     AllocationId: !GetAtt ElasticIPAddress.AllocationId
     SubnetId: !Ref PublicSubnetA
     Tags:
     - Key: Name
       Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: HIITVPC

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  JumpBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for JumpBox
      VpcId: !Ref HIITVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  JumpBox:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0df024d681444bc53
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref JumpBoxSecurityGroup
      Tags:
        - Key: Name
          Value: JumpBox

  
  DatabaseServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0df024d681444bc53
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnetB
      SecurityGroupIds:
        - !Ref DatabaseServerSecurityGroup
      Tags:
        - Key: Name
          Value: DatabaseServer


  ApplicationServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0df024d681444bc53
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnetB
      SecurityGroupIds:
        - !Ref ApplicationServerSecurityGroup
      Tags:
        - Key: Name
          Value: ApplicationServer

  WebHostingServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0df024d681444bc53
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref WebHostingServerSecurityGroup
      Tags:
        - Key: Name
          Value: WebHostingServer

  WebHostingServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the web hosting server
      VpcId: !Ref HIITVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ApplicationServerSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0


  DatabaseServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the database server
      VpcId: !Ref HIITVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt JumpBoxSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt JumpBoxSecurityGroup.GroupId

  ApplicationServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the application server
      VpcId: !Ref HIITVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt JumpBoxSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt JumpBoxSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt DatabaseServerSecurityGroup.GroupId
          